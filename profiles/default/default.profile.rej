--- profiles/default/default.profile	2018-11-26 10:22:35.000000000 -0800
+++ profiles/default/default.profile	2016-05-18 14:57:13.000000000 -0700
@@ -29,63 +38,15 @@ function default_profile_modules() {
  */
 function default_profile_details() {
   return array(
-    'name' => 'Pressflow',
-    'description' => 'Select this profile to enable some basic Drupal functionality and the default theme.'
-  );
-}
+    'name' => 'Pantheon',
+    'description' => 'A high-performance stack including support for Varnish.',
 
-/**
- * Return a list of tasks that this profile supports.
- *
- * @return
- *   A keyed array of tasks the profile will perform during
- *   the final stage. The keys of the array will be used internally,
- *   while the values will be displayed to the user in the installer
- *   task list.
- */
-function default_profile_task_list() {
+  );
 }
 
 /**
  * Perform any final installation tasks for this profile.
  *
- * The installer goes through the profile-select -> locale-select
- * -> requirements -> database -> profile-install-batch
- * -> locale-initial-batch -> configure -> locale-remaining-batch
- * -> finished -> done tasks, in this order, if you don't implement
- * this function in your profile.
- *
- * If this function is implemented, you can have any number of
- * custom tasks to perform after 'configure', implementing a state
- * machine here to walk the user through those tasks. First time,
- * this function gets called with $task set to 'profile', and you
- * can advance to further tasks by setting $task to your tasks'
- * identifiers, used as array keys in the hook_profile_task_list()
- * above. You must avoid the reserved tasks listed in
- * install_reserved_tasks(). If you implement your custom tasks,
- * this function will get called in every HTTP request (for form
- * processing, printing your information screens and so on) until
- * you advance to the 'profile-finished' task, with which you
- * hand control back to the installer. Each custom page you
- * return needs to provide a way to continue, such as a form
- * submission or a link. You should also set custom page titles.
- *
- * You should define the list of custom tasks you implement by
- * returning an array of them in hook_profile_task_list(), as these
- * show up in the list of tasks on the installer user interface.
- *
- * Remember that the user will be able to reload the pages multiple
- * times, so you might want to use variable_set() and variable_get()
- * to remember your data and control further processing, if $task
- * is insufficient. Should a profile want to display a form here,
- * it can; the form should set '#redirect' to FALSE, and rely on
- * an action in the submit handler, such as variable_set(), to
- * detect submission and proceed to further tasks. See the configuration
- * form handling code in install_tasks() for an example.
- *
- * Important: Any temporary variables should be removed using
- * variable_del() before advancing to the 'profile-finished' phase.
- *
  * @param $task
  *   The current $task of the install system. When hook_profile_tasks()
  *   is first called, this is 'profile'.
